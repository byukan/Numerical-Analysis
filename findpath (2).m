% Math 151A, Project 2 sample code

function [path, coeff] = findpath(ip,tp,method)
% Given data ip representing a path (x(t),y(t)),
% finds interpolants for x and y and evaluates the path at sample times tp.
%
% The i-th row ip(i,:) = [t(i) x(i) y(i)] defines the position at time t(i).
% 
% Input:
%   ip - the data to be interpolated (see above)
%   tp - The sample points to be evaluated
%   method - a string, one of:
%       'lagrange' (lagrange interpolation) 
%       'spline' (clamped spline)
% 
% Output:
%   path - the path evaluated at tp (in the same format as ip)
%   coeff - the coefficients of the interpolants
%
%   The first column contains the interpolating points T = ip(:,1),
%   and the remaining columns contain the relevant coefficients for the
%   x- and y-interpolants:
%
%   coeff = [T Cx Cy]
%
%   where Cx and Cy are the coefficients generated by either divdif or
%   spline3 for the x-data and y-data. 
%

T = ip(:,1);
X = ip(:,2); Y = ip(:,3);

m = length(tp);
n = length(T)-1;

path(1:m,1) = tp;

if(strcmp(method,'lagrange'))
    %Use Lagrange interpolation to interpolate the path
    coeff(1:n+1,1) = T;
    coeff(1:n+1,2) = divdif(T,X);
    coeff(1:n+1,3) = divdif(T,Y);   
    
    %Evaluate the spline at the sample points
    path(1:m,2) = evalP(coeff(1:n+1,2),T,tp);
    path(1:m,3) = evalP(coeff(1:n+1,3),T,tp);
else 
    %Use splines to interpolate the path
    if(~strcmp(method,'spline'))
        fprintf('Not supported. Using splines.\n');
    end
    
    coeff(1:n,1) = T(1:n);
    coeff(1:n,2:5) = spline3(T,X,'clamped');
    coeff(1:n,6:9) = spline3(T,Y,'clamped');
    
    %Evaluate the spline at the sample points
    path(1:m,2) = evalS(coeff(:,2:5),T,tp);
    path(1:m,3) = evalS(coeff(:,6:9),T,tp);
end


